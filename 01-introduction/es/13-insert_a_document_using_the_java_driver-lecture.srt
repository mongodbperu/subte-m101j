1
00:00:00,000 --> 00:00:00,210

2
00:00:00,210 --> 00:00:02,690
Bien, hemos hecho un recorrido

3
00:00:02,690 --> 00:00:06,580
por "HelloWorldMongoDBStyle",
Spark y Freemarker,

4
00:00:06,580 --> 00:00:10,110
combinando los tres en
en una única aplicación.

5
00:00:10,110 --> 00:00:12,780
Ahora vamos a ver con un
poco más de detalle cómo

6
00:00:12,780 --> 00:00:14,920
usar MongoDB desde Java.

7
00:00:14,920 --> 00:00:19,200
Éste es el ejemplo que teníamos
antes, "HelloWorldMongoDBStyle",

8
00:00:19,200 --> 00:00:22,960
donde creamos nuestro "MongoClient"
y nos conectamos a una base de datos

9
00:00:22,960 --> 00:00:25,090
desde ese cliente, la
base de datos "course".

10
00:00:25,090 --> 00:00:27,730
Luego, obtenemos una colección
de esa base de datos llamada

11
00:00:27,730 --> 00:00:31,190
"hello" y, por último, recuperamos
un documento de esa

12
00:00:31,190 --> 00:00:33,290
colección y lo imprimimos.

13
00:00:33,290 --> 00:00:36,720
Vamos a tomar parte de este
código como base para construir

14
00:00:36,720 --> 00:00:40,320
una aplicación simple que inserte
un documento en una colección.

15
00:00:40,320 --> 00:00:43,960
Voy a crear una nueva clase
Java llamada "SimpleInsertTest",

16
00:00:43,960 --> 00:00:49,570
y crearé mi "MongoClient".

17
00:00:49,570 --> 00:00:54,550

18
00:00:54,550 --> 00:00:59,210
Usaré aquí los valores por
defecto, "localhost:27017",

19
00:00:59,210 --> 00:01:03,130
y añadiré a mi método la excepción
"UnknownHostException".

20
00:01:03,130 --> 00:01:06,180
No necesito la base de datos,
así que voy a simplificar esto,

21
00:01:06,180 --> 00:01:13,620
"peopleCollection =
client.getDB("course")

22
00:01:13,620 --> 00:01:17,910
.getCollection("people");".

23
00:01:17,910 --> 00:01:22,090
Si recuerdas de
"HelloWorldMongoDBStyle",

24
00:01:22,090 --> 00:01:24,840
cuando hicimos un "findOne" el
valor de retorno es de

25
00:01:24,840 --> 00:01:26,860
tipo "DBObject".

26
00:01:26,860 --> 00:01:29,500
Y "DBObject" es una interfaz.

27
00:01:29,500 --> 00:01:32,850
Cuando estamos insertando
documentos en una colección,

28
00:01:32,850 --> 00:01:35,190
primero tenemos que crear el
documento para poder insertarlo.

29
00:01:35,190 --> 00:01:38,150
Pero no podemos crear una instancia
de una interfaz, por lo que

30
00:01:38,150 --> 00:01:40,700
necesitamos una clase concreta que
implemente "DBObject".

31
00:01:40,700 --> 00:01:43,500
Y el driver de Mongo para Java
proporciona una clase llamada

32
00:01:43,500 --> 00:01:46,180
"BasicDBObject", que implementa
"DBObject".

33
00:01:46,180 --> 00:01:48,990
Ésa es la clase que usaremos para
crear nuevos documentos e

34
00:01:48,990 --> 00:01:51,210
insertarlos en la base de datos.

35
00:01:51,210 --> 00:01:55,280
Lo llamaremos "personDoc",
"personDoc = new BasicDBObject()".

36
00:01:55,280 --> 00:01:57,890
Vamos a crear la persona más
simple que se nos ocurra,

37
00:01:57,890 --> 00:02:03,370
por ejemplo "("_id", "yeminj")",
y la insertamos.

38
00:02:03,370 --> 00:02:05,860
La forma de hacerlo es a través
del objeto "peopleCollection",

39
00:02:05,860 --> 00:02:07,330
ya que quiero insertarlo
en la colección

40
00:02:07,330 --> 00:02:09,770
"people", y llamo al método "insert",

41
00:02:09,770 --> 00:02:12,880
pasándole "personDoc".

42
00:02:12,880 --> 00:02:15,640
Lo que resulta interesante de
este documento es el nombre

43
00:02:15,640 --> 00:02:18,820
del campo que he creado,
que es "_id".

44
00:02:18,820 --> 00:02:22,600
He asignado el valor
"yeminj" a "_id".

45
00:02:22,600 --> 00:02:25,560
Y resulta interesante porque
MongoDB requiere que cada

46
00:02:25,560 --> 00:02:29,390
documento en una colección
contenga un campo "_id",

47
00:02:29,390 --> 00:02:31,690
y el valor de dicho campo

48
00:02:31,690 --> 00:02:33,350
tiene que ser único.

49
00:02:33,350 --> 00:02:36,310
En este caso, estoy creando
un campo "_id", y le estoy

50
00:02:36,310 --> 00:02:37,140
dando el valor "yeminj".

51
00:02:37,140 --> 00:02:40,120
Eso significa que no habrá ningún
otro documento en esta colección

52
00:02:40,120 --> 00:02:42,730
que pueda tener en el campo
"_id" la cadena "yeminj".

53
00:02:42,730 --> 00:02:45,460
Y como puedo ejecutar esto
varias veces, voy a

54
00:02:45,460 --> 00:02:50,000
llamar a "peopleCollection.drop()"
antes de ejecutarlo.

55
00:02:50,000 --> 00:02:51,920
Ahora creo que estamos listos
para ejecutarlo.

56
00:02:51,920 --> 00:02:57,590
Lo ejecutaré, y no imprime nada,
simplemente termina.

57
00:02:57,590 --> 00:03:00,250
Ahora echemos un vistazo
a la colección.

58
00:03:00,250 --> 00:03:02,050
Pondré "mongo course", de
forma que la base de datos

59
00:03:02,050 --> 00:03:07,065
por defecto será "course",
y "show collections".

60
00:03:07,065 --> 00:03:09,450
Y puedes ver que ahora tenemos
una colección "people" que fue

61
00:03:09,450 --> 00:03:12,067
creada automáticamente cuando
inserté el primer documento en

62
00:03:12,067 --> 00:03:13,350
esa colección.

63
00:03:13,350 --> 00:03:15,095
Veamos qué hay en la colección.

64
00:03:15,095 --> 00:03:17,800

65
00:03:17,800 --> 00:03:24,650
Y puedes ver que hay un
documento "{'_id': 'yeminj'}".

66
00:03:24,650 --> 00:03:28,470
Eso es una inserción básica de
un documento en una colección,

67
00:03:28,470 --> 00:03:31,960
pero esto es JSON, así que
hagamos este documento un poco

68
00:03:31,960 --> 00:03:33,110
más complejo.

69
00:03:33,110 --> 00:03:37,390
Voy a añadir unos cuantos
campos más al documento.

70
00:03:37,390 --> 00:03:44,680
Voy a decir "personDoc
.append("name", "Jeff Yemin")"

71
00:03:44,680 --> 00:03:51,970
".append("profession",
"programmer");"

72
00:03:51,970 --> 00:03:55,790
Ejecutémoslo otra vez y
veamos qué pasa.

73
00:03:55,790 --> 00:03:58,960
Y puedo ver que tenemos el
mismo "'_id': 'yeminj'",

74
00:03:58,960 --> 00:04:01,510
pero ahora tenemos también
"'name': 'Jeff Yemin'" y

75
00:04:01,510 --> 00:04:02,780
"'profession': 'programmer'".

76
00:04:02,780 --> 00:04:05,080
Esto demuestra cómo podemos
insertar un documento con

77
00:04:05,080 --> 00:04:06,520
múltiples campos.

78
00:04:06,520 --> 00:04:10,240
Ahora, usaremos la potencia
de JSON para hacer una

79
00:04:10,240 --> 00:04:12,070
estructura más complicada.

80
00:04:12,070 --> 00:04:15,040
Voy a crear un campo para
la lista de lenguajes

81
00:04:15,040 --> 00:04:17,130
de programación que me
resultan familiares.

82
00:04:17,130 --> 00:04:23,210
Entonces diré, "personDoc.
append("languages", )",

83
00:04:23,210 --> 00:04:26,390
pero en este caso necesito una
lista, no un valor escalar,

84
00:04:26,390 --> 00:04:28,750
por lo que pondré

85
00:04:28,750 --> 00:04:35,430
"Arrays.asList("Java",
"C++", "XLST")".

86
00:04:35,430 --> 00:04:37,980

87
00:04:37,980 --> 00:04:42,970
Lo ejecutaremos de nuevo,
y veamos qué devuelve.

88
00:04:42,970 --> 00:04:45,720
Ahora vemos que tenemos los
tres campos de antes, pero

89
00:04:45,720 --> 00:04:47,540
también tenemos un campo
"languages".

90
00:04:47,540 --> 00:04:50,690
Y puedes ver por estos
corchetes que es un array

91
00:04:50,690 --> 00:04:53,790
con tres valores,
"Java", "C++" y "XLST".

92
00:04:53,790 --> 00:04:55,375
Oh, escribí mal "XSLT".

93
00:04:55,375 --> 00:04:58,770

94
00:04:58,770 --> 00:05:02,090
Bien, veamos una última cosa que
podemos hacer con JSON.

95
00:05:02,090 --> 00:05:06,970
También puedo embeber un documento
dentro de la persona.

96
00:05:06,970 --> 00:05:10,250
Voy a hacer eso para
mi dirección.

97
00:05:10,250 --> 00:05:13,820
Crearé un campo
"address" y pondré,

98
00:05:13,820 --> 00:05:15,890
"new BasicDBObject()",

99
00:05:15,890 --> 00:05:18,610
éste es mi documento anidado,

100
00:05:18,610 --> 00:05:22,653
y diré, "("street", "Parkland")".

101
00:05:22,653 --> 00:05:27,140

102
00:05:27,140 --> 00:05:28,790
Vamos a crearlo de manera
ligeramente diferente.

103
00:05:28,790 --> 00:05:37,720
"("number", 20)" y
"("town", "WayLand")".

104
00:05:37,720 --> 00:05:41,950

105
00:05:41,950 --> 00:05:44,920
Vamos a insertar este documento
en la colección

106
00:05:44,920 --> 00:05:46,500
y veamos qué aspecto tiene.

107
00:05:46,500 --> 00:05:49,260
Ahora tenemos el mismo
documento pero, además de

108
00:05:49,260 --> 00:05:52,980
"_id", "name", "profession",
"languages", también tenemos un

109
00:05:52,980 --> 00:05:53,750
campo "address".

110
00:05:53,750 --> 00:05:57,480
Y este campo "address" es un
documento anidado con tres

111
00:05:57,480 --> 00:05:59,720
campos, "street", "number"
y "town".

112
00:05:59,720 --> 00:06:00,970
