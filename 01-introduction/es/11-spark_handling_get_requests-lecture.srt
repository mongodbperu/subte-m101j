1
00:00:00,000 --> 00:00:00,350

2
00:00:00,350 --> 00:00:04,660
En este vídeo opcional
vamos a analizar con un poco

3
00:00:04,660 --> 00:00:06,910
más de detalle las
rutas de Spark.

4
00:00:06,910 --> 00:00:09,360
Para el proyecto del blog,
vamos a proporcionarte

5
00:00:09,360 --> 00:00:10,690
la mayoría del código Spark.

6
00:00:10,690 --> 00:00:13,650
Queríamos hacer esta introducción
sobre cómo funcionan las rutas

7
00:00:13,650 --> 00:00:17,320
en Spark, simplemente para que
entiendas qué está ocurriendo,

8
00:00:17,320 --> 00:00:18,340
para que cuando mires el código,

9
00:00:18,340 --> 00:00:19,770
comprendas qué está haciendo.

10
00:00:19,770 --> 00:00:22,450
Entonces, la anatomía de una
aplicación Spark es la siguiente.

11
00:00:22,450 --> 00:00:26,630
En la parte de afuera tienes tu
servidor web, que es Jetty.

12
00:00:26,630 --> 00:00:29,470
Así que Spark tiene un servidor
Jetty embebido,

13
00:00:29,470 --> 00:00:32,810
de forma que cuando creas una ruta,
Jetty se inicia automáticamente

14
00:00:32,810 --> 00:00:34,940
en un hilo en segundo plano.

15
00:00:34,940 --> 00:00:41,290
En la parte interna, tienes un
manejador de Spark, de forma que

16
00:00:41,290 --> 00:00:44,010
cuando entra una petición a
Jetty, éste la reenvía

17
00:00:44,010 --> 00:00:45,630
al manejador de Spark.

18
00:00:45,630 --> 00:00:48,410
Una vez en el manejador de
Spark, tienes una o más

19
00:00:48,410 --> 00:00:54,920
rutas, por ejemplo, "GET /",
o "GET /test", y así sucesivamente.

20
00:00:54,920 --> 00:00:59,040
Cuando accedes a este servidor
web desde un navegador,

21
00:00:59,040 --> 00:01:03,280
haces una petición, digamos, a
localhost, esto se convierte en

22
00:01:03,280 --> 00:01:07,420
"GET /" en localhost, con 80
como puerto por defecto, aunque

23
00:01:07,420 --> 00:01:08,910
puedes cambiarlo.

24
00:01:08,910 --> 00:01:12,780
Y esa petición va a Jetty,
que, a su vez, la pasa

25
00:01:12,780 --> 00:01:15,160
al manejador de rutas de
Spark, que, a su vez, localiza

26
00:01:15,160 --> 00:01:18,320
la ruta correcta, que, en
este caso, es la ruta "/".

27
00:01:18,320 --> 00:01:20,510
Se ejecuta el manejador
para esa ruta

28
00:01:20,510 --> 00:01:23,050
y se devuelve una respuesta.

29
00:01:23,050 --> 00:01:24,840
Echemos un vistazo al código.

30
00:01:24,840 --> 00:01:27,805
Aquí tenemos una aplicación
que escribí hace un rato.

31
00:01:27,805 --> 00:01:31,760
Es similar a la que teníamos en
"SparkHelloWorld", pero

32
00:01:31,760 --> 00:01:33,270
con unas cuantas rutas más.

33
00:01:33,270 --> 00:01:34,860
Aquí tenemos nuestro método "main".

34
00:01:34,860 --> 00:01:37,330
Y tenemos tres rutas,

35
00:01:37,330 --> 00:01:38,880
cada una con un método "Spark.get".

36
00:01:38,880 --> 00:01:42,160
Tenemos un "get" aquí, otro
aquí, y otro aquí.

37
00:01:42,160 --> 00:01:44,030
Y definimos nuestras tres rutas,

38
00:01:44,030 --> 00:01:48,320
que son "/",
"/test", y esta tan

39
00:01:48,320 --> 00:01:50,450
curiosa aquí,
"/echo/:thing".

40
00:01:50,450 --> 00:01:52,240
Llegaremos a eso en un minuto.

41
00:01:52,240 --> 00:01:55,510
Para una petición a "/",
irá a este manejador.

42
00:01:55,510 --> 00:01:57,900
Para "/test", irá
a este manejador.

43
00:01:57,900 --> 00:02:00,090
Permíteme que te enseñe
cómo funciona.

44
00:02:00,090 --> 00:02:02,330
Voy a ejecutar
este programa.

45
00:02:02,330 --> 00:02:05,870
Spark está escuchando por
defecto en el puerto 4567.

46
00:02:05,870 --> 00:02:07,950
Voy a ir a esta
página web aquí.

47
00:02:07,950 --> 00:02:10,930
"/" va a "Hello World",

48
00:02:10,930 --> 00:02:14,750
y "/test" a "This
is a test page".

49
00:02:14,750 --> 00:02:16,540
Y esas son las dos primeras.

50
00:02:16,540 --> 00:02:19,600
Ahora vamos a echar un vistazo
a la tercera ruta, que es un poco

51
00:02:19,600 --> 00:02:20,340
más interesante.

52
00:02:20,340 --> 00:02:23,990
La tercera ruta está definida
como "/echo/:thing".

53
00:02:23,990 --> 00:02:26,460
":thing" es un comodín,
en este caso,

54
00:02:26,460 --> 00:02:31,210
y esta ruta coincidirá con
cualquiera que comience por "/echo/"

55
00:02:31,210 --> 00:02:33,930
y que tenga cualquier segmento
a continuación.

56
00:02:33,930 --> 00:02:36,940
Entonces, cuando llega la petición,
Spark la emparejará con

57
00:02:36,940 --> 00:02:39,860
"/echo/cat" o "/echo/dog".

58
00:02:39,860 --> 00:02:43,990
Puedes obtener el valor de
esta variable ":thing", o

59
00:02:43,990 --> 00:02:46,800
comodín, llamando a
"request.params(":thing")",

60
00:02:46,800 --> 00:02:50,460
en este caso, para hacer
coincidir la variable ":thing" aquí.

61
00:02:50,460 --> 00:02:52,560
Echemos un vistazo a eso
en un navegador web.

62
00:02:52,560 --> 00:02:54,940
Voy a suprimir esto y

63
00:02:54,940 --> 00:02:56,190
voy a poner "/echo/cat".

64
00:02:56,190 --> 00:02:59,130

65
00:02:59,130 --> 00:03:00,560
Y devuelve "cat".

66
00:03:00,560 --> 00:03:03,560
Eso ocurre porque lo
que devolvemos aquí es

67
00:03:03,560 --> 00:03:06,125
"request.params(":thing")".

68
00:03:06,125 --> 00:03:09,760
Y si cambio eso por "dog",
devolverá "dog".

69
00:03:09,760 --> 00:03:13,410
Así que esto es simplemente una
introducción al manejo de rutas

70
00:03:13,410 --> 00:03:17,600
en Spark, que muestra cómo
puedes definir rutas para

71
00:03:17,600 --> 00:03:21,500
múltiples URLs en tu aplicación,
y cómo puedes usar comodines para

72
00:03:21,500 --> 00:03:23,950
dar un poco de comportamiento
dinámico a las rutas que

73
00:03:23,950 --> 00:03:25,010
has definido.

74
00:03:25,010 --> 00:03:27,790
En la siguiente sección,
veremos el manejo de formularios

75
00:03:27,790 --> 00:03:31,140
usando rutas mapeadas a peticiones
"POST" en lugar de "GET".

76
00:03:31,140 --> 00:03:32,390
